package Sorting;

import java.util.ArrayList;

public class Test {
	public static void main(String[] args) {
		ArrayList<Integer> array = new ArrayList<Integer>();
		array.add(1);
		array.add(6);
		array.add(5);
		array.add(4);
		array.add(9);
		array.add(8);
		array.add(10);
		array.add(3);
		array.add(2);
		array.add(7);
		
		System.out.println(Sorting.insertionSort(array));
		
		System.out.println("\n");
		
/*
Results(each line is the print function that is found in the function):
		 
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 5, 6, 4, 9, 8, 10, 3, 2, 7]
[1, 5, 6, 4, 9, 8, 10, 3, 2, 7]
[1, 5, 6, 4, 9, 8, 10, 3, 2, 7]
[1, 4, 5, 6, 9, 8, 10, 3, 2, 7]
[1, 4, 5, 6, 9, 8, 10, 3, 2, 7]
[1, 4, 5, 6, 9, 8, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 4, 5, 6, 8, 9, 10, 3, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 3, 4, 5, 6, 8, 9, 10, 2, 7]
[1, 2, 3, 4, 5, 6, 8, 9, 10, 7]
[1, 2, 3, 4, 5, 6, 8, 9, 10, 7]
[1, 2, 3, 4, 5, 6, 8, 9, 10, 7]
[1, 2, 3, 4, 5, 6, 8, 9, 10, 7]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Accessed Inner Loop: 29 times
*/
		
		System.out.println(Sorting.selectionSort(array));
		System.out.println("\n");
		
/*
Result:

[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 2, 5, 4, 9, 8, 10, 3, 6, 7]
[1, 2, 5, 4, 9, 8, 10, 3, 6, 7]
[1, 2, 5, 4, 9, 8, 10, 3, 6, 7]
[1, 2, 5, 4, 9, 8, 10, 3, 6, 7]
[1, 2, 5, 4, 9, 8, 10, 3, 6, 7]
[1, 2, 5, 4, 9, 8, 10, 3, 6, 7]
[1, 2, 5, 4, 9, 8, 10, 3, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 9, 8, 10, 5, 6, 7]
[1, 2, 3, 4, 5, 8, 10, 9, 6, 7]
[1, 2, 3, 4, 5, 8, 10, 9, 6, 7]
[1, 2, 3, 4, 5, 8, 10, 9, 6, 7]
[1, 2, 3, 4, 5, 8, 10, 9, 6, 7]
[1, 2, 3, 4, 5, 6, 10, 9, 8, 7]
[1, 2, 3, 4, 5, 6, 10, 9, 8, 7]
[1, 2, 3, 4, 5, 6, 10, 9, 8, 7]
[1, 2, 3, 4, 5, 6, 7, 9, 8, 10]
[1, 2, 3, 4, 5, 6, 7, 9, 8, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Accessed Inner Loop: 45 times
*/
		
		System.out.println(Sorting.bubbleSort(array));
		
/*
Result:

[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 6, 5, 4, 9, 8, 10, 3, 2, 7]
[1, 5, 6, 4, 9, 8, 10, 3, 2, 7]
[1, 5, 4, 6, 9, 8, 10, 3, 2, 7]
[1, 5, 4, 6, 9, 8, 10, 3, 2, 7]
[1, 5, 4, 6, 8, 9, 10, 3, 2, 7]
[1, 5, 4, 6, 8, 9, 10, 3, 2, 7]
[1, 5, 4, 6, 8, 9, 3, 10, 2, 7]
[1, 5, 4, 6, 8, 9, 3, 2, 10, 7]
[1, 5, 4, 6, 8, 9, 3, 2, 7, 10]
[1, 5, 4, 6, 8, 9, 3, 2, 7, 10]
[1, 4, 5, 6, 8, 9, 3, 2, 7, 10]
[1, 4, 5, 6, 8, 9, 3, 2, 7, 10]
[1, 4, 5, 6, 8, 9, 3, 2, 7, 10]
[1, 4, 5, 6, 8, 9, 3, 2, 7, 10]
[1, 4, 5, 6, 8, 3, 9, 2, 7, 10]
[1, 4, 5, 6, 8, 3, 2, 9, 7, 10]
[1, 4, 5, 6, 8, 3, 2, 7, 9, 10]
[1, 4, 5, 6, 8, 3, 2, 7, 9, 10]
[1, 4, 5, 6, 8, 3, 2, 7, 9, 10]
[1, 4, 5, 6, 8, 3, 2, 7, 9, 10]
[1, 4, 5, 6, 8, 3, 2, 7, 9, 10]
[1, 4, 5, 6, 8, 3, 2, 7, 9, 10]
[1, 4, 5, 6, 3, 8, 2, 7, 9, 10]
[1, 4, 5, 6, 3, 2, 8, 7, 9, 10]
[1, 4, 5, 6, 3, 2, 7, 8, 9, 10]
[1, 4, 5, 6, 3, 2, 7, 8, 9, 10]
[1, 4, 5, 6, 3, 2, 7, 8, 9, 10]
[1, 4, 5, 6, 3, 2, 7, 8, 9, 10]
[1, 4, 5, 6, 3, 2, 7, 8, 9, 10]
[1, 4, 5, 6, 3, 2, 7, 8, 9, 10]
[1, 4, 5, 3, 6, 2, 7, 8, 9, 10]
[1, 4, 5, 3, 2, 6, 7, 8, 9, 10]
[1, 4, 5, 3, 2, 6, 7, 8, 9, 10]
[1, 4, 5, 3, 2, 6, 7, 8, 9, 10]
[1, 4, 5, 3, 2, 6, 7, 8, 9, 10]
[1, 4, 5, 3, 2, 6, 7, 8, 9, 10]
[1, 4, 5, 3, 2, 6, 7, 8, 9, 10]
[1, 4, 5, 3, 2, 6, 7, 8, 9, 10]
[1, 4, 3, 5, 2, 6, 7, 8, 9, 10]
[1, 4, 3, 2, 5, 6, 7, 8, 9, 10]
[1, 4, 3, 2, 5, 6, 7, 8, 9, 10]
[1, 4, 3, 2, 5, 6, 7, 8, 9, 10]
[1, 4, 3, 2, 5, 6, 7, 8, 9, 10]
[1, 4, 3, 2, 5, 6, 7, 8, 9, 10]
[1, 4, 3, 2, 5, 6, 7, 8, 9, 10]
[1, 4, 3, 2, 5, 6, 7, 8, 9, 10]
[1, 3, 4, 2, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Accessed Inner Loop: 81 times
*/
	}
}
